/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/


import * as THREE from 'three'
import React, { Suspense, useEffect, useLayoutEffect, useRef, useState } from 'react'
import { Canvas, useFrame } from '@react-three/fiber'
import { Html, Mask, Image, Environment, useGLTF, ContactShadows, OrbitControls } from '@react-three/drei'
import { PresentationControls } from '@react-three/drei'



export default function Model({ keys,_ready,_setReady, start, clicked, props }) {
  const { forward, backward, left, right, jump, buttonB, buttonR, buttonG, Escape } =keys
  
  const group = useRef()

  const image = useRef()

  const button_B = useRef()
  const button_R = useRef()
  const button_G = useRef()
  const button_joy = useRef()

  // const [_ready, set_Ready] = useState(false)


  // const [onUP, setUP] = useState(false)
  // const [onDOWN, setDOWN] = useState(false)
  // const [onLEFT, setLEFT] = useState(false)
  // const [onRIGHT, setRIGHT] = useState(false)

  // const [JoyVertical, setVertical] = useState(0.5)
  // const [JoyHorizontal, setHorizontal] = useState(-0.5)

  const v = new THREE.Vector3()

  // useFrame((state) => {
  //   // state.camera.position.lerp(v.set(0, 0.1, 1.2), 0.1)
  //   // forward, backward, left, right, jump
  //   // button_joy.current.rotation.x = Math.PI / 2+ right?0.5:0;
  //   // button_joy.current.rotation.x = Math.PI / 2+ left?-0.5:0;
  //   // button_joy.current.rotation.y = -Math.PI / 9+forward?0.5:0;
  //   // button_joy.current.rotation.y =-Math.PI / 9+ backward?-0.5:0;
  //   // button_joy.current.rotation=[Math.PI / 2, -Math.PI / 9, 0]


  // })



  // useFrame((state) => {
  //   // state.camera.position.lerp(v.set(0, 0.1, 1.2), 0.1)
  //   state.camera.position.lerp(v.set(0, 0.1, 1.2), 0.1)
  //   state.camera.lookAt(0, 0.05, 0)
  //   state.camera.updateProjectionMatrix()
  // })
  useFrame((state) => {
    if (start) {
      // state.camera.position.lerp(v.set(0, 0.1, 1.2), 0.1)
      state.camera.position.lerp(v.set(0, 0.2, 1.2), 0.05)
      // state.camera.position.lerp(v.set(0, 0, 8), 0.05)
      state.camera.lookAt(0, 0.04, 0)
      state.camera.updateProjectionMatrix()
    }else {
      // state.camera.position.lerp(v.set(0, 0, 8), 0.05)
      state.camera.position.lerp(v.set(4.5, 4, 7), 0.05)
      state.camera.lookAt(0, 0, 0)
      state.camera.updateProjectionMatrix()
    }

    // if (ready) {
    //   // state.camera.position.lerp(v.set(0, 0.1, 1.2), 0.1)
    //   state.camera.position.lerp(v.set(0, 0.2, 1.2), 0.05)
    //   // state.camera.position.lerp(v.set(0, 0, 8), 0.05)
    //   state.camera.lookAt(0, 0.04, 0)
    //   state.camera.updateProjectionMatrix()
    // }else {
    //   state.camera.position.lerp(v.set(0, 0, 8), 0.05)
    //   // state.camera.position.lerp(v.set(4.5, 4, 7), 0.05)
    //   state.camera.lookAt(0, 0, 0)
    //   state.camera.updateProjectionMatrix()
    // }

  })

  const [video] = useState(() => Object.assign(document.createElement('video'), { src: '/drei.mp4', crossOrigin: 'Anonymous', loop: true }))
  useEffect(() => void (clicked && video.play()), [video, clicked])


  const { nodes, materials } = useGLTF('/arcade_Draco.glb')
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        geometry={nodes.arcade.geometry}
        material={nodes.arcade.material}
        position={[0.25, 0.69, -0.01]}
        rotation={[Math.PI / 2, -Math.PI / 9, 0]}
      />
      <mesh
        ref={button_B}
        geometry={nodes.Button_PP.geometry}
        material={nodes.Button_PP.material}
        position={[0.24, buttonB ? 0.67 - 0.005 : 0.67, 0.15]}
        rotation={[Math.PI / 2, -Math.PI / 9, 0]}
      />
      <mesh
        geometry={nodes.joy.geometry}
        material={nodes.joy.material}
        // position={[0.25, 0.69, -0.12]}
        position={[0.25, 0.68, -0.12]}
        rotation={[Math.PI / 2, -Math.PI / 9, 0]}
      />
      <mesh
        ref={button_G}
        geometry={nodes.Button_GG.geometry}
        material={nodes.Button_GG.material}
        position={[0.24, buttonG ? 0.67 - 0.005 : 0.67, 0.02]}
        rotation={[Math.PI / 2, -Math.PI / 9, 0]}
      />
      <mesh
        ref={button_R}
        geometry={nodes.Button_YY.geometry}
        material={nodes.Button_YY.material}
        position={[0.24, buttonR ? 0.67 - 0.005 : 0.67, 0.08]}
        rotation={[Math.PI / 2, -Math.PI / 9, 0]}
      />
      {/* <mesh
        geometry={nodes.screen.geometry}
        material={nodes.screen.material}
        position={[0.11, 0.84, -0.01]}
        rotation={[Math.PI / 2, -Math.PI / 9, 0]}
      /> */}
      <mesh
        ref={button_joy}
        geometry={nodes.joy001.geometry}
        material={nodes.joy001.material}
        // position={[0.24, 0.66, -0.12]}
        position={[0.24, 0.65, -0.12]}
        // rotation={[Math.PI / 2-0.5, -Math.PI / 9, 0]}
        // rotation={[Math.PI / 2+0.5, -Math.PI / 9, 0]}
        // rotation={left&&!right?[Math.PI / 2+0.5, -Math.PI / 9, 0]:!left&&right?[Math.PI / 2-0.5, -Math.PI / 9, 0]:[Math.PI / 2, -Math.PI / 9, 0]}
        rotation-x={left && !right ? Math.PI / 2 + 0.5 : !left && right ? Math.PI / 2 - 0.5 : Math.PI / 2}
        rotation-y={forward && !backward ? -Math.PI / 9 + 0.5 : !forward && backward ? -Math.PI / 9 - 0.5 : -Math.PI / 9} />
      <group position={[0.11, 0.83, -0.02]} rotation={[Math.PI / 2, 0.33, 0]} >
        {/* <Image ref={image} rotation={[Math.PI / 2, Math.PI / 2, -Math.PI]} position={[0, 0.01, 0]} scale={[0.45, 0.45]} transparent={true} opacity={1} raycast={() => null} url={"/thumbnail.png"} /> */}
      </group>
     
      <mesh rotation={[0, Math.PI / 2, 0]} position={[0.05, 0.8, 0]}>
        <planeGeometry args={[0.4, 0.4]} />
        <meshStandardMaterial color="#585361" />
        {_ready &&

          <Html className="content"
            rotation={[-0.2, 0, 0]}
            // rotation={[0, Math.PI / 2, 0]}
            position={[-0.15, 0.165, 0]}
            scale={0.009}
            transform
          // occlude
          >
            <div className="wrapper">
              <iframe
                // style={{transform: 'rotate(90deg)'}}
                style={{ width: '110%', height: '110%', margin: 0, padding: 0, border: 0, top: 0, left: 0, borderRadius: '15%' }}
                className="relative w-full h-full"
                src="https://flappybacon.netlify.app/"
                // src="https://dayuan.dev/"
                // src="https://aframe.io/examples/showcase/anime-UI/"
                title="W3Schools Free Online Web Tutorials">
                  
              </iframe>
            </div>
          </Html>}
      </mesh>

      {/* <mesh rotation={[0, Math.PI / 2, 0]} position={[-0.3, 0, 0]}>
        <planeGeometry args={[50, 50]} />
        <meshStandardMaterial color="blue" />
      </mesh>
      <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, 0.1, 0]}>
        <planeGeometry args={[50, 50]} />
        <meshStandardMaterial color="orange" />
      </mesh> */}


      {/* <group position={[0, 0, 0]} rotation={[0, 0, 0.2]}>   // transform this
        <Html className="content"
          rotation={[0, Math.PI / 2, 0]}
          position={[0.23, 1, 0.18]}
          scale={0.01}
          transform occlude>
          <div className="wrapper">
            <iframe
              // style={{transform: 'rotate(90deg)'}}
              style={{ width: '110%', height: '110%', margin: 0, padding: 0, border: 0, top: 0, left: 0 }}
              className="relative w-full h-full"
              // src="https://nftsearch.site/"
              // src="https://dayuan.dev/"
              src="https://aframe.io/examples/showcase/anime-UI/"
              title="W3Schools Free Online Web Tutorials">

            </iframe>
          </div>
        </Html>
      </group> */}
      {/* <group position={[0.11, 0.83, -0.02]} rotation={[0, 0, 0]} >
        <Html className="content" rotation={[0, 0, 0]} position={[0, 10, -0.09]} scale={50} transform occlude>
          <div className="wrapper">
            <iframe src="https://nftsearch.site/" title="nftsearch"></iframe>
            <iframe
              // style={{transform: 'rotate(90deg)'}}
              style={{ width: '110%', height: '110%', margin: 0, padding: 0, border: 0, top: 0, left: 0 }}
              className="relative w-full h-full"
              // src="https://nftsearch.site/"
              // src="https://dayuan.dev/"
              src="https://aframe.io/examples/showcase/anime-UI/"
              title="W3Schools Free Online Web Tutorials"></iframe>
          </div>
        </Html>
      </group> */}
      <mesh
      onClick={()=>{_setReady(true)}}
        geometry={nodes.screen01.geometry}
        // material={nodes.screen01.material}
        position={[0.11, 0.83, -0.02]}
        rotation={[Math.PI / 2, -0.34, 0]}
      >
        {!_ready && <meshPhysicalMaterial clearcoat={1} clearcoatRoughness={0} toneMapped={false}>
          <videoTexture
            // rotation={[Math.PI / 2,0, 0]}
            attach="map"
            args={[video]}
            flipY={false}
            // repeat={[5, 9]}
            // offset={[-0.1, 0]}
            repeat={[1, 1]}
            offset={[0, 0]}
            wrapT={THREE.RepeatWrapping}
            wrapS={THREE.RepeatWrapping}
            encoding={THREE.sRGBEncoding}
          />
        </meshPhysicalMaterial>}


        {_ready && <meshPhysicalMaterial
          thickness={5}
          roughness={0.1}
          clearcoat={0.9}
          clearcoatRoughness={1}
          transmission={1}
          ior={1}
          envMapIntensity={9}
          color='#050505'
          attenuationTint='#0096ff'
          attenuationDistance={0.8} >
        </meshPhysicalMaterial>}

      </mesh>
      {/* <mesh
        geometry={nodes.screen01.geometry}
        // material={nodes.screen01.material}
        position={[0.11, 0.83, -0.02]}
        rotation={[Math.PI / 2, -0.34, 0]}
      > */}
      {/* <group position={[-0.001, 0, 0]} >
        <Html className="content"
          // rotation={[0, 0, 0]}
          rotation={[0, Math.PI / 2 +  0.3, -Math.PI / 2]}
          position={[-0.04, 0.17, -0.06]}
          scale={0.0085}
          transform occlude>
          <div className="wrapper">
            <iframe
              // style={{transform: 'rotate(90deg)'}}
              style={{ width: '110%', height: '110%', margin: 0, padding: 0, border: 0, top: 0, left: 0 }}
              className="relative w-full h-full"
              // src="https://nftsearch.site/"
              // src="https://dayuan.dev/"
              src="https://aframe.io/examples/showcase/anime-UI/"
              title="W3Schools Free Online Web Tutorials">

            </iframe>
          </div>
        </Html>
        </group> */}
      {/* <group rotation={[0, Math.PI / 8 * 1.5, 0]} >
          <Image ref={image} rotation={[Math.PI / 2, Math.PI / 2, -Math.PI]} position={[0, 0, 0]} scale={[0.4, 0.3]} transparent={true} opacity={1} raycast={() => null} url={"/thumbnail.png"} />
        </group> */}
      {/* </mesh> */}

    </group>
  )
}

useGLTF.preload('/arcade_Draco.glb')
